// Lucas Medeiros Cavalcante

#include <string>
#include <iostream>
#include <cstdio>
#include <sstream>
#include <utility>
#include <cctype>
#include <algorithm>
#include <vector>
#include <iterator>
#include <math.h>
#include <queue>
#include <map>
#include <new>
#include <set>

#define NUM 20005
#define MAXINT 2147483647

using namespace std;

typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;

vector<vi> adj;
vi status;



bool bfs(int u){
	map<int, int> dist;

	dist[u] = 0;
	status[u] = 1;
	queue<int> q;
	q.push(u);

	while(!q.empty()){

		int atual = q.front();
		printf("no atual %d\n", atual);
		printf("status-> %d\n", status[atual]);
		q.pop();
		for(int i = 0; i < (int)adj.at(u).size(); i++){

			int vizinho = adj.at(atual)[i];
			printf("vizinho : %d\n", vizinho);
			printf("status-> %d\n", status[vizinho]);
			if(status[vizinho] == 0){

				if(status[atual] == 1){
					status[vizinho] = 2;
					}
				else{
					status[vizinho] = 1;
				}
				dist[vizinho] = dist[u] + 1;
				q.push(vizinho);
			}
			else{
				if( status[atual] == status[vizinho]){
					return false;
				}
			}
		}
	}
	return true;
	}

int main(){
	int entradas;

	scanf("%d", &entradas);
	for(int k = 0; k < entradas ; k++){
		int bugs, lig;
		scanf("%d %d", &bugs, &lig);
		adj.assign(bugs,vi());
		status.assign(bugs,0);
		for(int j = 0; j < lig; j++){

			int ori, dest;
			scanf("%d %d", &ori, &dest);
			adj.at(ori-1).push_back(dest-1);
			//printf("adicionado %d to %d\n", ori-1, dest-1);
			adj.at(dest-1).push_back(ori-1);
			//printf("adicionado %d to %d\n", dest-1, ori-1);
		}
		printf("Scenario #%d:\n", k+1);
		bool answer = true;
		for(int i = 0; i < bugs; i++){
			if(status[i] == 0){
				answer = answer && bfs(i);
			}
		}

		if(answer){
			printf("No suspicious bugs found!\n");
		}
		else printf("Suspicious bugs found!\n");
	}

}
